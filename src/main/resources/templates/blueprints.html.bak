<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layout}">
<head>
    <link rel="icon" type="image/x-icon" href="/favicon.ico"/>
</head>
<body>
    <div layout:fragment="content" class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Blueprints</h1>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createBlueprintModal">
                <i class="fas fa-plus"></i> Create Blueprint
            </button>
        </div>        <div class="alert alert-danger" th:if="${error != null}" th:text="${error}"></div>
        <div class="alert alert-success" th:if="${success != null}" th:text="${success}"></div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Active Version</th>
                        <th>Created By</th>
                        <th>Created At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:if="${blueprints.empty}">
                        <td colspan="7" class="text-center">No blueprints found</td>
                    </tr>
                    <tr th:each="blueprint : ${blueprints}">
                        <td th:text="${blueprint.id}"></td>
                        <td th:text="${blueprint.name}"></td>
                        <td th:text="${blueprint.description}"></td>
                        <td th:text="${blueprint.activeVersion ?: 'None'}"></td>
                        <td th:text="${blueprint.createdBy}"></td>
                        <td th:text="${#temporals.format(blueprint.createdAt, 'MM/dd/yyyy HH:mm')}"></td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-info" th:onclick="'viewVersions(' + ${blueprint.id} + ')'">
                                    <i class="fas fa-code-branch"></i>
                                </button>
                                <button class="btn btn-sm btn-primary" th:onclick="'editBlueprint(' + ${blueprint.id} + ')'">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" th:onclick="'deleteBlueprint(' + ${blueprint.id} + ')'">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
          <!-- Create Blueprint Modal -->
        <div class="modal fade" id="createBlueprintModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Blueprint</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="modalErrorAlert" class="alert alert-danger alert-dismissible fade show d-none">
                            <span id="errorMessage"></span>
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                        <form id="createBlueprintForm">
                            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                            </div>
                            <div class="modal-footer px-0 pb-0">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" id="createButton" class="btn btn-primary" onclick="submitCreateBlueprint()">Create</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div><script th:inline="javascript">
        function submitCreateBlueprint(event) {
            event.preventDefault();
            
            const form = event.target;
            const nameInput = form.querySelector('#name');
            const descInput = form.querySelector('#description');
            
            // Validate inputs
            if (!nameInput.value.trim()) {
                alert('Name is required');
                nameInput.focus();
                return;
            }
            
            // Prepare data
            const data = {
                name: nameInput.value.trim(),
                description: descInput.value.trim(),
                createdBy: 'system'
            };
            
            console.log('Submitting blueprint data:', data);
            
            const csrfToken = form.querySelector('input[name="_csrf"]').value;
            const csrfHeader = form.querySelector('input[name="_csrf"]').name;
            
            // Show loading indicator
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
            
            fetch('/api/blueprints', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    [csrfHeader]: csrfToken
                },
                body: JSON.stringify(data)
            })
            .then(async response => {
                console.log('Response status:', response.status);
                
                // Always try to get the response body for better error handling
                let responseBody;
                try {
                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.indexOf("application/json") !== -1) {
                        responseBody = await response.json();
                    } else {
                        responseBody = await response.text();
                    }
                } catch (err) {
                    console.error('Error parsing response:', err);
                    responseBody = null;
                }
                
                console.log('Response body:', responseBody);
                
                if (!response.ok) {
                    throw new Error(
                        (responseBody && responseBody.message) 
                        ? responseBody.message 
                        : 'Failed to create blueprint'
                    );
                }
                
                return responseBody;
            })            .then(data => {
                console.log('Blueprint created successfully:', data);
                
                // Reset submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
                
                // Close the modal
                const modal = document.getElementById('createBlueprintModal');
                const bsModal = bootstrap.Modal.getInstance(modal);
                bsModal.hide();
                
                // Reset the form
                form.reset();
                
                // Show success message
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show';
                alertDiv.setAttribute('role', 'alert');
                alertDiv.innerHTML = `
                    Blueprint created successfully!
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.table-responsive'));
                
                // Reload after showing message
                setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
                console.error('Error creating blueprint:', error);
                
                // Reset submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
                
                // Show error message
                const errorMessage = error.message || 'An error occurred while creating the blueprint';
                
                // Display error in the modal
                let errorDiv = form.querySelector('.alert-danger');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger alert-dismissible fade show mt-3';
                    errorDiv.setAttribute('role', 'alert');
                    form.prepend(errorDiv);
                }
                
                errorDiv.innerHTML = `
                    ${errorMessage}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Keep the modal open so the user can see the error message
            });
        }
        }

        function viewVersions(id) {
            window.location.href = `/blueprints/${id}/versions`;
        }

        function editBlueprint(id) {
            // Will be implemented with form population
        }

        function deleteBlueprint(id) {
            if (confirm('Are you sure you want to delete this blueprint?')) {
                const csrfToken = document.querySelector('input[name="_csrf"]').value;
                const csrfHeader = document.querySelector('input[name="_csrf"]').name;
                
                fetch(`/api/blueprints/${id}`, {
                    method: 'DELETE',
                    headers: {
                        [csrfHeader]: csrfToken
                    }
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Error deleting blueprint');
                    }
                });
            }
        }
    </script>
</body>
</html>
