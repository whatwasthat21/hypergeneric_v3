// Blueprint management functionality

function submitCreateBlueprint(event) {
    if (event) {
        event.preventDefault();
    }
    console.log('submitCreateBlueprint function called');
    
    // Get form and validate inputs
    const form = document.getElementById('createBlueprintForm');
    if (!form) {
        console.error('Create blueprint form not found');
        return;
    }
    
    const nameInput = document.getElementById('name');
    const descInput = document.getElementById('description');
    const errorAlert = document.getElementById('modalErrorAlert');
    const errorMessage = document.getElementById('errorMessage');
    
    console.log('Form elements found:', { 
        form: !!form, 
        nameInput: !!nameInput, 
        descInput: !!descInput, 
        errorAlert: !!errorAlert, 
        errorMessage: !!errorMessage 
    });
    
    // Clear previous errors
    if (errorAlert) {
        errorAlert.classList.add('d-none');
    }

    // Validate inputs
    if (!nameInput || !nameInput.value.trim()) {
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = 'Name is required';
        }
        if (nameInput) nameInput.focus();
        return;
    }

    // Get CSRF token
    const csrfToken = document.querySelector('input[name="_csrf"]');
    const csrfHeader = document.querySelector('input[name="_csrf_header"]');
    
    if (!csrfToken || !csrfHeader) {
        console.error('CSRF token or header not found');
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = 'Authentication error. Please refresh the page.';
        }
        return;
    }

    // Prepare data
    const data = {
        name: nameInput.value.trim(),
        description: descInput ? descInput.value.trim() : '',
        createdBy: 'system'
    };
    
    console.log('Submitting blueprint data:', data);

    // Show loading indicator on the button
    const submitBtn = document.getElementById('createButton');
    if (!submitBtn) {
        console.error('Create button not found');
        return;
    }
    
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
    
    // Make API request
    fetch('/api/blueprints', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            [csrfHeader.value]: csrfToken.value
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            return response.text().then(text => {
                try {
                    const data = JSON.parse(text);
                    throw new Error(data.message || 'Failed to create blueprint');
                } catch (e) {
                    throw new Error('Failed to create blueprint: ' + text);
                }
            });
        }
        
        return response.json();
    })
    .then(data => {
        console.log('Blueprint created successfully:', data);
        
        // Close the modal first
        const modal = document.getElementById('createBlueprintModal');
        if (modal) {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) {
                console.log('Closing modal with Bootstrap API');
                bsModal.hide();
            }
        }
        
        // Reset the form
        form.reset();
        
        // Show success message and redirect
        window.location.href = '/blueprints?success=Blueprint created successfully';
    })
    .catch(error => {
        console.error('Error creating blueprint:', error);
        
        // Reset submit button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
        
        // Show error message
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = error.message || 'An error occurred while creating the blueprint';
        }
    });
}

// View Versions
function viewVersions(id) {
    window.location.href = `/blueprints/${id}`;
}

// Edit Blueprint
function editBlueprint(id) {
    alert('Edit functionality will be implemented soon');
}

// Delete Blueprint
function deleteBlueprint(id) {
    if (confirm('Are you sure you want to delete this blueprint?')) {
        const csrfToken = document.querySelector('input[name="_csrf"]');
        const csrfHeader = document.querySelector('input[name="_csrf_header"]');
        
        if (!csrfToken || !csrfHeader) {
            alert('Authentication error. Please refresh the page.');
            return;
        }
        
        fetch(`/api/blueprints/${id}`, {
            method: 'DELETE',
            headers: {
                [csrfHeader.value]: csrfToken.value
            }
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                return response.text().then(text => {
                    throw new Error(text || 'Error deleting blueprint');
                });
            }
        })
        .catch(error => {
            console.error('Error deleting blueprint:', error);
            alert('Error deleting blueprint: ' + error.message);
        });
    }
}

// Initialize event listeners when document is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('Blueprint.js loaded');
    
    // Initialize form submit handler
    const form = document.getElementById('createBlueprintForm');
    if (form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            console.log('Form submit event triggered');
            submitCreateBlueprint(event);
        });
        console.log('Form submit handler attached');
    } else {
        console.error('Create blueprint form not found');
    }
    
    // Also attach click handler to create button as fallback
    const createButton = document.getElementById('createButton');
    if (createButton) {
        createButton.addEventListener('click', function(event) {
            event.preventDefault();
            console.log('Create button click event triggered');
            submitCreateBlueprint(event);
        });
        console.log('Create button click handler attached');
    } else {
        console.error('Create button not found');
    }
    
    // Add event listeners for table action buttons
    document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            viewVersions(id);
        });
    });
    
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            editBlueprint(id);
        });
    });
    
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            deleteBlueprint(id);
        });
    });
});
