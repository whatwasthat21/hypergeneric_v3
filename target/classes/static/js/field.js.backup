// Field management functionality with CSRF protection

// Utility function to get CSRF token
function getCsrfToken() {
    console.log('Retrieving CSRF token for API request');
    
    // Try to get token from form field
    const csrfInput = document.querySelector('input[name="_csrf"]');
    if (csrfInput) {
        console.log('Found CSRF token in form input:', csrfInput.name, csrfInput.value);
        return {
            header: 'X-XSRF-TOKEN', // Spring Security with CookieCsrfTokenRepository expects X-XSRF-TOKEN
            value: csrfInput.value
        };
    }
    
    // Try to get token from meta tag
    const metaCsrf = document.querySelector('meta[name="_csrf"]');
    const metaCsrfHeader = document.querySelector('meta[name="_csrf_header"]');
    if (metaCsrf && metaCsrfHeader) {
        console.log('Found CSRF token in meta tags:', metaCsrfHeader.content, metaCsrf.content);
        return {
            header: 'X-XSRF-TOKEN', // Spring Security with CookieCsrfTokenRepository expects X-XSRF-TOKEN
            value: metaCsrf.content
        };
    }
    
    // Try to get token from cookies
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.startsWith('XSRF-TOKEN=')) {
            const token = decodeURIComponent(cookie.substring('XSRF-TOKEN='.length));
            console.log('Found CSRF token in cookies as XSRF-TOKEN:', token);
            return {
                header: 'X-XSRF-TOKEN',
                value: token
            };
        }
    }
    
    console.warn('CSRF token not found in form, meta tags, or cookies');
    return {
        header: 'X-XSRF-TOKEN',
        value: ''
    };
}

// Helper function to add CSRF token to fetch options
function addCsrfToFetchOptions(options = {}) {
    const csrf = getCsrfToken();
    
    // Initialize headers if not present
    if (!options.headers) {
        options.headers = {};
    }
    
    // Add CSRF token to headers
    options.headers[csrf.header] = csrf.value;
    
    // Ensure credentials are included
    options.credentials = 'include';
    
    return options;
}

// Helper function to perform fetch with CSRF token
function fetchWithCsrf(url, options = {}) {
    return fetch(url, addCsrfToFetchOptions(options));
}

// Field management functions
function submitCreateField() {
    console.log('submitCreateField called');
    const form = document.getElementById('createFieldForm');
    if (!form) {
        console.error('Create field form not found');
        return;
    }
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // Clean up empty values
    for (let key in data) {
        if (data[key] === '') {
            delete data[key];
        }
    }
    
    console.log('Submitting field data:', data);
    
    // Get CSRF token
    const csrf = getCsrfToken();
    if (!csrf.value) {
        console.error('CSRF token not found');
        alert('Authentication error. Please refresh the page.');
        return;
    }
    
    // Disable the button and show loading state
    const submitBtn = document.getElementById('createFieldButton');
    if (submitBtn) {
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
    }
    
    fetchWithCsrf('/api/fields', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)    }).then(response => {
        if (response.ok) {
            // Close the modal first
            const modal = document.getElementById('createFieldModal');
            if (modal) {
                // Get the Bootstrap modal instance
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    console.log('Closing modal with Bootstrap API');
                    bsModal.hide();
                }
            }
            
            // Then redirect
            setTimeout(() => {
                window.location.href = '/fields?success=Field created successfully';
            }, 300);
        } else {
            return response.text().then(text => {
                throw new Error('Error creating field: ' + (text || 'Unknown error'));
            });
        }
    }).catch(error => {
        console.error('Error creating field:', error);
        alert('Error creating field: ' + error.message);
        
        // Re-enable the button
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    });
}

function submitEditField() {
    console.log('submitEditField called');
    const form = document.getElementById('editFieldForm');
    const id = document.getElementById('editFieldId').value;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // Clean up empty values
    for (let key in data) {
        if (data[key] === '') {
            delete data[key];
        }
    }
    
    console.log('Submitting updated field data:', data);
    
    // Get CSRF token
    const csrf = getCsrfToken();
    if (!csrf.value) {
        console.error('CSRF token not found');
        alert('Authentication error. Please refresh the page.');
        return;
    }
    
    fetchWithCsrf(`/api/fields/${id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    }).then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error updating field');
        }
    }).catch(error => {
        console.error('Error updating field:', error);
        alert('Error updating field: ' + error.message);
    });
}

function deleteField(id) {
    if (confirm('Are you sure you want to delete this field?')) {
        fetchWithCsrf(`/api/fields/${id}`, {
            method: 'DELETE'
        }).then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Error deleting field');
            }
        }).catch(error => {
            console.error('Error deleting field:', error);
            alert('Error deleting field: ' + error.message);
        });
    }
}

function editField(id) {
    fetchWithCsrf(`/api/fields/${id}`)
        .then(response => response.json())
        .then(field => {
            document.getElementById('editFieldId').value = field.id;
            document.getElementById('editKey').value = field.key;
            document.getElementById('editLabel').value = field.label;
            document.getElementById('editDescription').value = field.description || '';
            document.getElementById('editType').value = field.type;
            document.getElementById('editWidget').value = field.widget || '';
            document.getElementById('editMinNumber').value = field.minNumber || '';
            document.getElementById('editMaxNumber').value = field.maxNumber || '';
            document.getElementById('editValidationJson').value = field.validationJson || '';
            document.getElementById('editDefaultJson').value = field.defaultJson || '';
            document.getElementById('editOptionsJson').value = field.optionsJson || '';
            
            updateEditTypeSpecificFields();
            
            // Show the modal
            const modal = document.getElementById('editFieldModal');
            if (modal) {
                const bsModal = new bootstrap.Modal(modal);
                bsModal.show();
            }
        })
        .catch(error => {
            console.error('Error loading field details:', error);
            alert('Error loading field details');
        });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Field management initialized with CSRF protection');
    
    // Add event listeners for edit buttons in the table
    document.querySelectorAll('.edit-field-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            if (id) {
                editField(id);
            }
        });
    });
    
    // Add event listeners for delete buttons in the table
    document.querySelectorAll('.delete-field-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            if (id) {
                deleteField(id);
            }
        });
    });
      // Manually bind event listeners to create/edit buttons
    const createFieldBtn = document.getElementById('createFieldButton');
    if (createFieldBtn) {
        createFieldBtn.addEventListener('click', submitCreateField);
        console.log('Added event listener to create field button');
    } else {
        console.error('Create field button not found');
    }
    
    const editFieldBtn = document.getElementById('updateFieldButton');
    if (editFieldBtn) {
        editFieldBtn.addEventListener('click', submitEditField);
        console.log('Added event listener to edit field button');
    } else {
        console.error('Update field button not found');
    }
});
