// Blueprint management functionality

// Create Blueprint
function submitCreateBlueprint(event) {
    if (event) {
        event.preventDefault();
    }
    console.log('submitCreateBlueprint function called');
    
    try {
        // Get form and validate inputs
        const form = document.getElementById('createBlueprintForm');
        if (!form) {
            console.error('Create blueprint form not found');
            return;
        }
        
        const nameInput = document.getElementById('name');
        const descInput = document.getElementById('description');
        const errorAlert = document.getElementById('modalErrorAlert');
        const errorMessage = document.getElementById('errorMessage');
        
        console.log('Form elements found:', { 
            form: !!form, 
            nameInput: !!nameInput, 
            descInput: !!descInput, 
            errorAlert: !!errorAlert, 
            errorMessage: !!errorMessage 
        });
        
        // Clear previous errors
        if (errorAlert) {
            errorAlert.classList.add('d-none');
        }
    
    // Validate inputs
    if (!nameInput || !nameInput.value.trim()) {
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = 'Name is required';
        }
        if (nameInput) nameInput.focus();
        return;
    }
    
    // Prepare data
    const data = {
        name: nameInput.value.trim(),
        description: descInput ? descInput.value.trim() : '',
        createdBy: 'system'
    };
    
    console.log('Submitting blueprint data:', data);
    
    // Get CSRF token
    const csrfToken = form.querySelector('input[name="_csrf"]');
    if (!csrfToken) {
        console.error('CSRF token not found');
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = 'Authentication error. Please refresh the page.';
        }
        return;
    }
    
    const csrfHeader = csrfToken.name;
    const csrfValue = csrfToken.value;    // Show loading indicator on the button
    const submitBtn = document.getElementById('createButton');
    if (!submitBtn) {
        console.error('Create button not found');
        return;
    }
    
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
    
    fetch('/api/blueprints', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            [csrfHeader]: csrfValue
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        console.log('Response status:', response.status);
        
        // Handle specific HTTP status codes
        if (response.status === 403) {
            throw new Error('Authentication error. Please refresh the page and try again.');
        } else if (response.status === 400) {
            return response.json().then(data => {
                throw new Error(data.message || 'Invalid blueprint data. Please check your input.');
            });
        } else if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.message || 'Failed to create blueprint');
            });
        }
        
        return response.json();
    })
    .then(data => {
        console.log('Blueprint created successfully:', data);
        
        // Reset submit button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
        
        // Close the modal
        const modal = document.getElementById('createBlueprintModal');
        if (modal) {
            // Blur any focused elements inside the modal before closing
            const focusedElement = modal.querySelector(':focus');
            if (focusedElement) {
                console.log('Blurring focused element before closing modal:', focusedElement);
                focusedElement.blur();
            }
            
            // Reset the form before hiding the modal
            form.reset();
            
            // Close the modal after a small delay to ensure blur is processed
            setTimeout(() => {
                // Get the Bootstrap modal instance
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    console.log('Closing modal with Bootstrap API');
                    bsModal.hide();
                } else {
                    console.warn('Bootstrap modal instance not found, trying jQuery');
                    try {
                        $(modal).modal('hide');
                    } catch (e) {
                        console.error('Failed to close modal:', e);
                    }
                }
                
                // Return focus to a safe element (main container)
                setTimeout(() => {
                    const mainContent = document.querySelector('.container');
                    if (mainContent) {
                        console.log('Returning focus to main container');
                        mainContent.setAttribute('tabindex', '-1');
                        mainContent.focus();
                        mainContent.removeAttribute('tabindex');
                    }
                }, 100);
            }, 10);
        }
        
        // Show success message and reload
        window.location.href = '/blueprints?success=Blueprint created successfully';
    })
    .catch(error => {
        console.error('Error creating blueprint:', error);
        
        // Reset submit button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
        
        // Show error message in the modal
        if (errorAlert && errorMessage) {
            errorAlert.classList.remove('d-none');
            errorMessage.textContent = error.message || 'An error occurred while creating the blueprint';
        }
    });
}

// View Versions
function viewVersions(id) {
    window.location.href = `/blueprints/${id}`;
}

// Edit Blueprint
function editBlueprint(id) {
    // Will be implemented with form population
    alert('Edit functionality will be implemented soon');
}

// Delete Blueprint
function deleteBlueprint(id) {
    if (confirm('Are you sure you want to delete this blueprint?')) {
        const csrfToken = document.querySelector('input[name="_csrf"]').value;
        const csrfHeader = document.querySelector('input[name="_csrf"]').name;
        
        fetch(`/api/blueprints/${id}`, {
            method: 'DELETE',
            headers: {
                [csrfHeader]: csrfToken
            }
        }).then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Error deleting blueprint');
            }
        });
    }
}

// Initialize event listeners when document is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('Blueprint.js loaded');
    
    // Add event listeners for blueprint modal buttons
    const createButton = document.getElementById('createButton');
    if (createButton) {
        // Remove any existing event listeners (just in case)
        createButton.removeEventListener('click', submitCreateBlueprint);
        
        // Add the event listener
        createButton.addEventListener('click', function(event) {
            console.log('Create button clicked directly - calling submitCreateBlueprint function');
            event.preventDefault();
            submitCreateBlueprint();
        });
        
        console.log('Create button found and event listener attached:', createButton);
    } else {
        console.error('Create button with ID "createButton" not found in the DOM');
        
        // Try to find it by another method as fallback
        const fallbackButton = document.querySelector('#createBlueprintModal .btn-primary:not([data-bs-dismiss="modal"])');
        if (fallbackButton) {
            console.log('Found fallback button for create:', fallbackButton);
            fallbackButton.id = 'createButton'; // Assign ID
            fallbackButton.removeEventListener('click', submitCreateBlueprint);
            fallbackButton.addEventListener('click', function(event) {
                console.log('Fallback button clicked - calling submitCreateBlueprint function');
                event.preventDefault();
                submitCreateBlueprint();
            });
        } else {
            console.error('No suitable create button found by any method');
        }
    }
    
    // Add form submit handler
    const createForm = document.getElementById('createBlueprintForm');
    if (createForm) {
        createForm.addEventListener('submit', function(event) {
            event.preventDefault();
            console.log('Form submitted through regular submit event');
            submitCreateBlueprint();
        });
        console.log('Form submit handler attached');
    } else {
        console.error('Create form not found in the DOM');
    }

    // Add event listeners for view buttons
    document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            viewVersions(id);
        });
    });
    
    // Add event listeners for edit buttons
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            editBlueprint(id);
        });
    });
    
    // Add event listeners for delete buttons
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            deleteBlueprint(id);
        });
    });
    
    // Modal focus management is now handled by the csrf.js shared utility
});